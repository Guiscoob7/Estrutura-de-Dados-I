#include <stdio.h>
#include <stdlib.h>
#include "funcoes.h"

// FunÃ§Ã£o para criar um novo nÃ³
No* criarNo(int valor) {
    No* novoNo = (No*)malloc(sizeof(No));
    if (novoNo != NULL){
        novoNo->data = valor;
        novoNo->prev = NULL;
        novoNo->next = NULL;
    }
    return novoNo;
}

// FunÃ§Ã£o para inicializar a lista
void inicializarLista(ListaDuplamenteEncadeada* lista) {
    lista->cabeca = NULL;
    lista->cauda = NULL;
}

// FunÃ§Ã£o para adicionar um novo nÃ³ ao final da lista
void adicionarAoFinal(ListaDuplamenteEncadeada* lista, int valor) {
    No* novoNo = criarNo(valor);
    if (lista->cabeca == NULL) {
        lista->cabeca = lista->cauda = novoNo;
    } else {
        lista->cauda->next = novoNo;
        novoNo->prev = lista->cauda;
        lista->cauda = novoNo;
    }
}

// FunÃ§Ã£o para imprimir a lista
void imprimirLista(ListaDuplamenteEncadeada* lista) {
    No* temp = lista->cabeca;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// FunÃ§Ã£o para trocar os dados de dois nÃ³s
void trocar(No* a, No* b) {
    int temp = a->data;
    a->data = b->data;
    b->data = temp;
}

// FunÃ§Ã£o de ordenaÃ§Ã£o Stooge Sort
void stoogeSort(ListaDuplamenteEncadeada* lista, No* l, No* h, int profundidade) {
    if (l == NULL || h == NULL || l == h) return;

    if (l->data > h->data) {
        trocar(l, h);
        printf("Troca %d e %d:\n", l->data, h->data);
        imprimirLista(lista);
        limpar();
    }

    // Calcular o tamanho da sublista
    int tamanho = 1;
    No* temp = l;
    while (temp != h) {
        tamanho++;
        temp = temp->next;
    }

    // Se o tamanho for maior que 2, aplicamos o Stooge Sort
    if (tamanho > 2) {
        int umTerco = tamanho / 3;

        // Encontrar o nÃ³ um terÃ§o do caminho a partir de l
        No* primeiroTerco = l;
        for (int i = 0; i < umTerco; i++) {
            primeiroTerco = primeiroTerco->next;
        }

        // Encontrar o nÃ³ dois terÃ§os do caminho a partir de l
        No* doisTerco = h;
        for (int i = 0; i < umTerco; i++) {
            doisTerco = doisTerco->prev;
        }

        // RecursÃ£o nas trÃªs partes
        stoogeSort(lista, l, doisTerco, profundidade + 1);
        stoogeSort(lista, primeiroTerco, h, profundidade + 1);
        stoogeSort(lista, l, doisTerco, profundidade + 1);
    }
}


// FunÃ§Ã£o para ordenar a lista usando Stooge Sort
void ordenarLista(ListaDuplamenteEncadeada* lista) {
    if (lista->cabeca && lista->cauda) {
        printf("Lista Inicial:\n");
        imprimirLista(lista);
        printf("\n");
        limpar();
        stoogeSort(lista, lista->cabeca, lista->cauda, 0);
        printf("Lista Ordenada:\n");
        imprimirLista(lista);
    }
}

// FunÃ§Ã£o para limpar a tela e aguardar o usuÃ¡rio
void limpar() {
    // Mensagem para o usuÃ¡rio
    printf(YELLOW "\n\nğŸ›‘ Pressione ENTER para continuar... ğŸ›‘" RESET);

    // Pausa atÃ© o usuÃ¡rio pressionar ENTER
    getchar();

    // Limpa a tela do console (funciona em sistemas Unix)
    printf("\033[H\033[2J");  // Cores e comando de limpar a tela
}