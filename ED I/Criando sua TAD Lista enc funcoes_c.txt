#include "funcoes.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Fun√ß√£o para limpar a tela e solicitar ao usu√°rio pressionar ENTER para
// continuar

void limpar() {
    // Mensagem para o usu√°rio
    printf("\n\n%süõë %sPressione ENTER para continuar... %süõë%s: ", LIGHT_CYAN, LIGHT_YELLOW, LIGHT_CYAN, RESET);

    // Pausa at√© o usu√°rio pressionar ENTER
    getchar();

    // Limpa a tela do console (funciona em sistemas Unix)
    printf("\033[H\033[2J");  // Cores e comando de limpar a tela
}


// Fun√ß√£o para limpar o buffer de entrada, removendo caracteres extras
void limparbuffer() {
  int c;
  while ((c = getchar()) != '\n' && c != EOF);
}

Signo *Libera_lista(Signo *Ptl) {
  Signo* aux = Ptl;
  while (aux != NULL){
    Signo* temp = aux;
    aux = aux->prox;
    free(temp);
  }
  return NULL;
}

Signo *Cria_lista(void) {
  return NULL;
}

Signo *Insere_elem(Signo *Ptl) {
    
    Signo *novo = malloc(sizeof(Signo));
    // Verifica se a aloca√ß√£o de mem√≥ria foi bem-sucedida
    if (novo == NULL) {  
        printf("%süö´ Erro ao alocar mem√≥ria!%s\n", RED, RESET);
        return Ptl;
    }
    // Inserir o nome do astrologista
    printf("%süîÆ Insira o nome do astrologista: %s", LIGHT_CYAN, RESET);
    scanf("%49[^\n]", novo->vetor.nome);
    limparbuffer();

    // Inserir o dia do nascimento
    printf("%süìÖ Insira o dia do nascimento: %s", BLUE, RESET);
    scanf("%d", &novo->vetor.data.dia);
    limparbuffer();

    // Inserir o m√™s do nascimento
    printf("%süìÖ Insira o m√™s do nascimento: %s", BLUE, RESET);
    scanf("%d", &novo->vetor.data.mes);
    limparbuffer();

    // Inserir o ano do nascimento
    printf("%süìÖ Insira o ano do nascimento: %s", BLUE, RESET);
    scanf("%d", &novo->vetor.data.ano);
    limparbuffer();

    // Determinar signo e elemento
    if ((determinarSignoEElemento(
            novo->vetor.data.dia, novo->vetor.data.mes,
            novo->vetor.signo_pessoa, novo->vetor.elemento))) {
        printf("%süö´ Processo de Inser√ß√£o Cancelado!%s\n", RED, RESET);
        free(novo);
        return Ptl;
    }

    novo->prox = NULL;
    if (Ptl == NULL){
      Ptl = novo;
    }
    else{
      Signo* temp = Ptl;
      while (temp->prox != NULL){
         temp = temp->prox;
      }
      temp->prox = novo;
      
    }
    printf("%s‚úÖ Astrologista inserido com sucesso!%s\n", GREEN, RESET);
    return Ptl;
}

int determinarSignoEElemento(int dia, int mes, char *signo, char *elemento) {
  if (mes == 1) {
    strcpy(signo, (dia <= 20) ? "Capric√≥rnio" : "Aqu√°rio");
    strcpy(elemento, (dia <= 20) ? "Terra" : "Ar");
  } else if (mes == 2) {
    strcpy(signo, (dia <= 19) ? "Aqu√°rio" : "Peixes");
    strcpy(elemento, (dia <= 19) ? "Ar" : "√Ågua");
  } else if (mes == 3) {
    strcpy(signo, (dia <= 20) ? "Peixes" : "√Åries");
    strcpy(elemento, (dia <= 20) ? "√Ågua" : "Fogo");
  } else if (mes == 4) {
    strcpy(signo, (dia <= 20) ? "√Åries" : "Touro");
    strcpy(elemento, (dia <= 20) ? "Fogo" : "Terra");
  } else if (mes == 5) {
    strcpy(signo, (dia <= 21) ? "Touro" : "G√™meos");
    strcpy(elemento, (dia <= 21) ? "Terra" : "Ar");
  } else if (mes == 6) {
    strcpy(signo, (dia <= 21) ? "G√™meos" : "C√¢ncer");
    strcpy(elemento, (dia <= 21) ? "Ar" : "√Ågua");
  } else if (mes == 7) {
    strcpy(signo, (dia <= 22) ? "C√¢ncer" : "Le√£o");
    strcpy(elemento, (dia <= 22) ? "√Ågua" : "Fogo");
  } else if (mes == 8) {
    strcpy(signo, (dia <= 23) ? "Le√£o" : "Virgem");
    strcpy(elemento, (dia <= 23) ? "Fogo" : "Terra");
  } else if (mes == 9) {
    strcpy(signo, (dia <= 23) ? "Virgem" : "Libra");
    strcpy(elemento, (dia <= 23) ? "Terra" : "Ar");
  } else if (mes == 10) {
    strcpy(signo, (dia <= 23) ? "Libra" : "Escorpi√£o");
    strcpy(elemento, (dia <= 23) ? "Ar" : "√Ågua");
  } else if (mes == 11) {
    strcpy(signo, (dia <= 22) ? "Escorpi√£o" : "Sagit√°rio");
    strcpy(elemento, (dia <= 22) ? "√Ågua" : "Fogo");
  } else if (mes == 12) {
    strcpy(signo, (dia <= 21) ? "Sagit√°rio" : "Capric√≥rnio");
    strcpy(elemento, (dia <= 21) ? "Fogo" : "Terra");
  } else {
    printf("Data de nascimento inv√°lida.\n");
    return 1;
  }
  return 0;
}

int E_vazia(Signo *Ptl) {
  if (Ptl == NULL)
    return 1;
  return 0;
}


const char *obterMes(int numeroDoMes) {
    // Array de strings contendo os nomes dos meses
    static const char *meses[] = {
        "Janeiro", "Fevereiro", "Mar√ßo",    "Abril",   "Maio",     "Junho",
        "Julho",   "Agosto",    "Setembro", "Outubro", "Novembro", "Dezembro"
    };

    // Verifica se o n√∫mero do m√™s est√° dentro do intervalo v√°lido
    if (numeroDoMes < 1 || numeroDoMes > 12) {
        printf("%süö´ %sN√∫mero do m√™s inv√°lido!%s\n", RED, CYAN, RESET); // Mensagem de erro
        return NULL;
    }

    // Retorna o nome do m√™s correspondente
    return meses[numeroDoMes - 1];
}

void Exibir_lista(Signo *Ptl) {

    // Verifica se a lista est√° vazia
    if (E_vazia(Ptl) == 1) {
        printf("%s%süîç %sA lista est√° vazia! Nada para exibir.%s\n", LIGHT_BLUE, BOLD, RESET, RESET);
        return;
    }
    Signo *aux = Ptl;
    int cont = 0;
    // Exibe todos os elementos da lista
    printf("%s%süìã %sLista de Astrologistas:%s\n", MAGENTA, BOLD, RESET, RESET);
    while (aux != NULL) {
        // Imprime o n√∫mero e nome do astrologista
        printf("\n%s%s%d. %s%s%s\n", LIGHT_GREEN, BOLD, ++cont, LIGHT_YELLOW, aux->vetor.nome, RESET);

        // Imprime a data de nascimento com formata√ß√£o
        printf("   %süåü Data de nascimento: %02d/%s/%04d%s\n", MAGENTA, 
               aux->vetor.data.dia,
               obterMes(aux->vetor.data.mes),
               aux->vetor.data.ano, RESET);

        // Imprime o signo
        printf("   %süîÆ Signo: %s%s%s\n", GREEN, BOLD, aux->vetor.signo_pessoa, RESET);

        // Imprime o elemento
        printf("   %süå± Elemento: %s%s%s\n", CYAN, BOLD, aux->vetor.elemento, RESET);
        aux = aux->prox;
    }
    printf("\n%s%s‚ú® Fim da lista! ‚ú®%s\n", MAGENTA, BOLD, RESET);
}


Signo *Remove_elem(Signo *Ptl, int pos){

    // Verifica se a posi√ß√£o √© v√°lida
    if (pos < 0 || pos > Quantidade_Elementos(Ptl)) {
        printf("%s‚ö†Ô∏è Erro: Posi√ß√£o inv√°lida!%s\n", RED, RESET);
        return Ptl;
    }

    // Remove o elemento da lista
    if (Ptl == NULL) {
        printf("%süîç A lista j√° est√° vazia!%s\n", YELLOW, RESET);
        return Ptl;
    }

    // Move os elementos para preencher o espa√ßo do elemento removido
    Signo* atual = Ptl;
    Signo* anterior = NULL;
    int cont = 0;

    while (atual != NULL && cont < pos){
        anterior = atual;
        atual = atual->prox;
        cont++;
    }

    if (pos == 0){
        Ptl = Ptl->prox;
    }
    else{
        anterior->prox = atual->prox;
    }
    free(atual);

    // Exibe a confirma√ß√£o de remo√ß√£o
    printf("%süóëÔ∏è Removendo o %d¬∫ astrologista...%s\n", MAGENTA, pos + 1, RESET);

    // Mensagem de sucesso
    printf("%s‚úÖ Astrologista removido com sucesso!%s\n", GREEN, RESET);

    return Ptl;
}

void Salvar_lista(Signo *Ptl) {
    FILE *file;

    // Solicita ao usu√°rio o nome do arquivo
    printf("%süîπ %sDigite o nome do arquivo para salvar a lista%s: %s", CYAN, BOLD, RESET, RESET);
    char nome[100];
    int cont = 0;
    scanf("%s", nome);
    limparbuffer();
    strcat(nome, ".txt"); // Adiciona a extens√£o para o arquivo textual
    file = fopen(nome, "w");

    // Verifica se o arquivo foi aberto corretamente
    if (file == NULL) {
        printf("%s‚ùå %sErro ao abrir o arquivo!%s\n", RED, BOLD, RESET);
        limpar();
        return;
    }

    // Mensagem de introdu√ß√£o no arquivo
    fprintf(file,
            "üåü‚ú® As estrelas, distantes e onipotentes, apenas contemplam o movimento "
            "incessante das engrenagens do destino. Sabem que, a cada passo, uma "
            "nova dire√ß√£o j√° foi tra√ßada antes de ser percorrida. Com seu "
            "conhecimento do futuro, elas moldam o passado e observam o "
            "presente. Embora vejam o que nos √© invis√≠vel, s√£o t√£o c√≠nicas que "
            "nunca revelariam o que sabem. ‚ú®üåü\n\n");

    // Grava cada elemento da lista no arquivo
    Signo *aux = Ptl;
    while (aux != NULL) {
        fprintf(file, "%d. %s\n", ++cont, aux->vetor.nome);
        fprintf(file, "   üåü Data de nascimento: %02d/%s/%04d\n", 
                aux->vetor.data.dia,
                obterMes(aux->vetor.data.mes),
                aux->vetor.data.ano);
        fprintf(file, "   üîÆ Signo: %s\n", aux->vetor.signo_pessoa);
        fprintf(file, "   üå± Elemento: %s\n\n", aux->vetor.elemento);
        aux = aux->prox;
    }

    // Fecha o arquivo
    fclose(file);
    printf("%s‚úÖ %sElemento(s) salvo(s) com sucesso!%s\n", GREEN, BOLD, RESET);
}


// Fun√ß√£o para inicializar os dados dos signos
void inicializarSignos(Signo_Enciclopedia *signos) {
  // Inicializando os signos com dados fict√≠cios e descri√ß√µes
  strcpy(signos[0].nome, "√Åries");
  strcpy(signos[0].datas, "21 mar - 19 abr");
  strcpy(signos[0].elemento, "Fogo");
  strcpy(signos[0].qualidade, "Cardinal");
  strcpy(signos[0].regente, "Marte");
  strcpy(signos[0].descricao,
         "√Åries √© o primeiro signo do zod√≠aco, simbolizando novos come√ßos e "
         "lideran√ßa. Pessoas de √Åries s√£o conhecidas por sua energia, "
         "entusiasmo e coragem.");

  strcpy(signos[1].nome, "Touro");
  strcpy(signos[1].datas, "20 abr - 20 mai");
  strcpy(signos[1].elemento, "Terra");
  strcpy(signos[1].qualidade, "Fixo");
  strcpy(signos[1].regente, "V√™nus");
  strcpy(signos[1].descricao,
         "Touro √© um signo de estabilidade e praticidade. Pessoas de Touro s√£o "
         "conhecidas por sua determina√ß√£o, confiabilidade e aprecia√ß√£o do "
         "conforto material.");

  strcpy(signos[2].nome, "G√™meos");
  strcpy(signos[2].datas, "21 mai - 20 jun");
  strcpy(signos[2].elemento, "Ar");
  strcpy(signos[2].qualidade, "Mut√°vel");
  strcpy(signos[2].regente, "Merc√∫rio");
  strcpy(signos[2].descricao,
         "G√™meos √© o signo da comunica√ß√£o e adaptabilidade. Pessoas de G√™meos "
         "s√£o vers√°teis, curiosas e t√™m um talento para lidar com v√°rias "
         "informa√ß√µes ao mesmo tempo.");

  strcpy(signos[3].nome, "C√¢ncer");
  strcpy(signos[3].datas, "21 jun - 22 jul");
  strcpy(signos[3].elemento, "√Ågua");
  strcpy(signos[3].qualidade, "Cardinal");
  strcpy(signos[3].regente, "Lua");
  strcpy(signos[3].descricao,
         "C√¢ncer √© o signo das emo√ß√µes e da fam√≠lia. Pessoas de C√¢ncer s√£o "
         "sens√≠veis, protetoras e muito ligadas √†s suas ra√≠zes e aos seus "
         "entes queridos.");

  strcpy(signos[4].nome, "Le√£o");
  strcpy(signos[4].datas, "23 jul - 22 ago");
  strcpy(signos[4].elemento, "Fogo");
  strcpy(signos[4].qualidade, "Fixo");
  strcpy(signos[4].regente, "Sol");
  strcpy(
      signos[4].descricao,
      "Le√£o √© o signo da autoconfian√ßa e da criatividade. Pessoas de Le√£o s√£o "
      "carism√°ticas, generosas e gostam de estar no centro das aten√ß√µes.");

  strcpy(signos[5].nome, "Virgem");
  strcpy(signos[5].datas, "23 ago - 22 set");
  strcpy(signos[5].elemento, "Terra");
  strcpy(signos[5].qualidade, "Mut√°vel");
  strcpy(signos[5].regente, "Merc√∫rio");
  strcpy(signos[5].descricao,
         "Virgem √© o signo da an√°lise e do detalhe. Pessoas de Virgem s√£o "
         "pr√°ticas, meticulosas e t√™m um grande talento para organizar e "
         "melhorar sistemas.");

  strcpy(signos[6].nome, "Libra");
  strcpy(signos[6].datas, "23 set - 22 out");
  strcpy(signos[6].elemento, "Ar");
  strcpy(signos[6].qualidade, "Cardinal");
  strcpy(signos[6].regente, "V√™nus");
  strcpy(signos[6].descricao, "Libra √© o signo da harmonia e da justi√ßa. "
                              "Pessoas de Libra s√£o diplom√°ticas, equilibradas "
                              "e t√™m um forte senso est√©tico e de parceria.");

  strcpy(signos[7].nome, "Escorpi√£o");
  strcpy(signos[7].datas, "23 out - 21 nov");
  strcpy(signos[7].elemento, "√Ågua");
  strcpy(signos[7].qualidade, "Fixo");
  strcpy(signos[7].regente, "Plut√£o");
  strcpy(signos[7].descricao,
         "Escorpi√£o √© o signo da transforma√ß√£o e da intensidade. Pessoas de "
         "Escorpi√£o s√£o apaixonadas, determinadas e t√™m um profundo "
         "entendimento das emo√ß√µes humanas.");

  strcpy(signos[8].nome, "Sagit√°rio");
  strcpy(signos[8].datas, "22 nov - 21 dez");
  strcpy(signos[8].elemento, "Fogo");
  strcpy(signos[8].qualidade, "Mut√°vel");
  strcpy(signos[8].regente, "J√∫piter");
  strcpy(signos[8].descricao,
         "Sagit√°rio √© o signo da aventura e da expans√£o. Pessoas de Sagit√°rio "
         "s√£o otimistas, curiosas e t√™m um grande desejo de explorar o mundo e "
         "buscar conhecimento.");

  strcpy(signos[9].nome, "Capric√≥rnio");
  strcpy(signos[9].datas, "22 dez - 19 jan");
  strcpy(signos[9].elemento, "Terra");
  strcpy(signos[9].qualidade, "Cardinal");
  strcpy(signos[9].regente, "Saturno");
  strcpy(signos[9].descricao,
         "Capric√≥rnio √© o signo da ambi√ß√£o e da disciplina. Pessoas de "
         "Capric√≥rnio s√£o respons√°veis, pr√°ticas e t√™m um forte desejo de "
         "alcan√ßar seus objetivos e construir seguran√ßa.");

  strcpy(signos[10].nome, "Aqu√°rio");
  strcpy(signos[10].datas, "20 jan - 18 fev");
  strcpy(signos[10].elemento, "Ar");
  strcpy(signos[10].qualidade, "Fixo");
  strcpy(signos[10].regente, "Urano");
  strcpy(
      signos[10].descricao,
      "Aqu√°rio √© o signo da inova√ß√£o e da individualidade. Pessoas de Aqu√°rio "
      "s√£o originais, humanit√°rias e t√™m uma vis√£o progressista do futuro.");

  strcpy(signos[11].nome, "Peixes");
  strcpy(signos[11].datas, "19 fev - 20 mar");
  strcpy(signos[11].elemento, "√Ågua");
  strcpy(signos[11].qualidade, "Mut√°vel");
  strcpy(signos[11].regente, "Netuno");
  strcpy(signos[11].descricao,
         "Peixes √© o signo da intui√ß√£o e da empatia. Pessoas de Peixes s√£o "
         "sonhadoras, compassivas e t√™m uma conex√£o profunda com as emo√ß√µes e "
         "a espiritualidade.");
}

// Fun√ß√£o para exibir informa√ß√µes detalhadas de um signo baseado no √≠ndice fornecido
void exibirInformacoes(const Signo_Enciclopedia *signos, int index) {
    // Exibe o t√≠tulo da se√ß√£o de informa√ß√µes do signo
    printf("%süìú Informa√ß√µes do Signo:%s\n", MAGENTA, RESET);
    // Exibe o nome do signo
    printf("%süåü Signo:%s %s\n", CYAN, RESET, signos[index].nome);
    // Exibe as datas associadas ao signo
    printf("%süìÖ Datas:%s %s\n", CYAN, RESET, signos[index].datas);
    // Exibe o elemento associado ao signo
    printf("%süåø Elemento:%s %s\n", GREEN, RESET, signos[index].elemento);
    // Exibe a qualidade do signo
    printf("%süîß Qualidade:%s %s\n", YELLOW, RESET, signos[index].qualidade);
    // Exibe o regente do signo
    printf("%süëë Regente:%s %s\n", CYAN, RESET, signos[index].regente);
    // Exibe a descri√ß√£o do signo
    printf("%süìù Descri√ß√£o:%s %s\n\n", MAGENTA, RESET, signos[index].descricao);
}

// Fun√ß√£o para exibir a lista de signos do zod√≠aco com seus respectivos emojis
void exibirSignos(void) {
    // Exibe a lista de signos do zod√≠aco com formata√ß√£o e emojis
    printf("%süåü Lista dos Signos do Zod√≠aco:%s\n", MAGENTA, RESET);
    printf("%s[1] - %s√Åries%s üêè\n", GREEN, BLUE, RESET);
    printf("%s[2] - %sTouro%s üêÇ\n", GREEN, BLUE, RESET);
    printf("%s[3] - %sG√™meos%s üëØ\n", GREEN, BLUE, RESET);
    printf("%s[4] - %sC√¢ncer%s ü¶Ä\n", GREEN, BLUE, RESET);
    printf("%s[5] - %sLe√£o%s ü¶Å\n", GREEN, BLUE, RESET);
    printf("%s[6] - %sVirgem%s üåæ\n", GREEN, BLUE, RESET);
    printf("%s[7] - %sLibra%s ‚öñÔ∏è\n", GREEN, BLUE, RESET);
    printf("%s[8] - %sEscorpi√£o%s ü¶Ç\n", GREEN, BLUE, RESET);
    printf("%s[9] - %sSagit√°rio%s üèπ\n", GREEN, BLUE, RESET);
    printf("%s[10] - %sCapric√≥rnio%s üêê\n", GREEN, BLUE, RESET);
    printf("%s[11] - %sAqu√°rio%s üåä\n", GREEN, BLUE, RESET);
    printf("%s[12] - %sPeixes%s üêü\n", GREEN, BLUE, RESET);
}

// Fun√ß√£o para calcular e exibir a compatibilidade entre dois signos, com base nas suas posi√ß√µes
void Compatibilidade_Signos(Signo* Ptl, int pos1, int pos2) {

    // Array com os nomes dos signos do zod√≠aco
    const char* signos[] = {
        "√Åries", "Touro", "G√™meos", "C√¢ncer", "Le√£o", "Virgem", "Libra", "Escorpi√£o", "Sagit√°rio", "Capric√≥rnio", "Aqu√°rio", "Peixes"
    };

    // Matriz de compatibilidade onde cada c√©lula [i][j] representa a compatibilidade entre o signo i e o signo j
    int Matriz_Compatibilidade[12][12] = {
        { 85, 60, 75, 50, 90, 55, 80, 65, 95, 70, 85, 60 }, // √Åries
        { 60, 85, 55, 80, 65, 90, 60, 85, 70, 95, 55, 80 }, // Touro
        { 75, 55, 85, 60, 80, 65, 90, 55, 85, 60, 95, 70 }, // G√™meos
        { 50, 80, 60, 85, 55, 90, 65, 95, 60, 85, 70, 90 }, // C√¢ncer
        { 90, 65, 80, 55, 85, 60, 75, 55, 95, 70, 85, 60 }, // Le√£o
        { 55, 90, 65, 85, 60, 85, 55, 80, 65, 95, 60, 85 }, // Virgem
        { 80, 60, 90, 65, 75, 55, 85, 60, 80, 65, 95, 70 }, // Libra
        { 65, 85, 55, 95, 55, 80, 60, 85, 65, 90, 70, 85 }, // Escorpi√£o
        { 95, 70, 85, 60, 95, 65, 80, 65, 85, 60, 75, 55 }, // Sagit√°rio
        { 70, 95, 60, 85, 70, 95, 65, 90, 60, 85, 55, 80 }, // Capric√≥rnio
        { 85, 55, 95, 70, 85, 60, 95, 70, 75, 55, 85, 60 }, // Aqu√°rio
        { 60, 80, 70, 90, 60, 85, 70, 85, 55, 80, 60, 85 }  // Peixes
    };

     // Verifica se as posi√ß√µes s√£o v√°lidas
    if (pos1 < 0 || pos1 >= Quantidade_Elementos(Ptl) || pos2 < 0 || pos2 >= Quantidade_Elementos(Ptl)) {
        printf("%s‚ö†Ô∏è Erro: Posi√ß√£o inv√°lida!%s\n", RED, RESET);
        return;
    }

    Signo* aux = Ptl;
    int indice1 = -1, indice2 = -1;
    int cont = 0;
    // Encontra os √≠ndices dos signos com base nas posi√ß√µes fornecidas
    while (aux != NULL){
        if (cont == pos1){
            for (int i = 0; i < 12; i++){
                if (strcmp(signos[i], aux->vetor.signo_pessoa) == 0){
                    indice1 = i;
                    break;
                }
            }
        }
        if (cont == pos2){
            for (int i = 0; i < 12; i++){
                if (strcmp(signos[i], aux->vetor.signo_pessoa) == 0){
                    indice2 = i;
                    break;
                }
            }
        }
        aux = aux->prox;
        cont++;
    }

    // Verifica se ambos os signos foram encontrados na lista
    if (indice1 == -1 || indice2 == -1) {
        printf("%s‚ö†Ô∏è Erro: Um ou ambos os signos n√£o foram encontrados.%s\n", RED, RESET);
        return;
    }

    // Imprime o resultado da compatibilidade com formata√ß√£o e cores
    printf("\n%süåü Compatibilidade entre %s%s%s e %s%s%s:%s\n",
        CYAN, BLUE, signos[indice1], RESET, BLUE, signos[indice2], RESET, RESET);
    printf("%s\nCompatibilidade: %d%%%s\n", YELLOW, Matriz_Compatibilidade[indice1][indice2], RESET);
}


// Fun√ß√£o para exibir mensagens de boas-vindas

/*
cd C:\Importante\C
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
.\programa.exe
*/

void boasVindas() {
    printf("\n" CYAN BOLD "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" RESET "\n");
    printf(CYAN BOLD "‚ïë" RESET " üåü‚ú® " RED BOLD "Bem-vindo ao " RESET MAGENTA "Programa de Astrologia" CYAN " ‚ú®üåü " CYAN BOLD "                           ‚ïë" RESET "\n");
    printf(CYAN BOLD "‚ïë" RESET " üåûüåú " YELLOW "Descubra a compatibilidade dos signos e muito mais!" CYAN " üåõüåù " CYAN BOLD "           ‚ïë" RESET "\n");
    printf(CYAN BOLD "‚ïë" RESET " üîÆü™ê " GREEN "Que os astros estejam a seu favor!" CYAN " ü™êüîÆ " CYAN BOLD "                            ‚ïë" RESET "\n");
    printf(CYAN BOLD "‚ïë" RESET " üå†üåå " MAGENTA "Vamos explorar o universo dos signos juntos!" CYAN " üååüå† " CYAN BOLD "                  ‚ïë" RESET "\n");
    printf(CYAN BOLD "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" RESET "\n\n");
}

// Fun√ß√£o para atualizar as informa√ß√µes de um astrologista na lista
void Atualizar_Astrologista(Signo* Ptl, int pos) {
    // Verifica se o ponteiro da lista √© v√°lido e se a posi√ß√£o fornecida √© v√°lida
    if (Ptl == NULL || pos < 0 || pos >= Quantidade_Elementos(Ptl)) {
        printf("%s‚ùå Erro: Astrologista n√£o encontrado!%s\n", RED, RESET);
        return;
    }
    Signo *aux = Ptl;
    int cont = 0;
    while (cont < pos){
        aux = aux->prox;
        cont++;
    }
    // Solicita ao usu√°rio para atualizar as informa√ß√µes do astrologista na posi√ß√£o fornecida
    printf("%süîÑ Atualize as informa√ß√µes do Astrologista %d:%s\n", CYAN, pos + 1, RESET);

    // Atualiza o nome do astrologista
    printf("%sInsira o novo nome: %s", LIGHT_GREEN, RESET);
    scanf(" %49[^\n]", aux->vetor.nome);
    limparbuffer();

    // Atualiza o dia de nascimento
    printf("%sInsira o novo dia de nascimento: %s", LIGHT_GREEN, RESET);
    scanf("%d", &aux->vetor.data.dia);
    limparbuffer();

    // Atualiza o m√™s de nascimento
    printf("%sInsira o novo m√™s de nascimento: %s", LIGHT_GREEN, RESET);
    scanf("%d", &aux->vetor.data.mes);
    limparbuffer();

    // Atualiza o ano de nascimento
    printf("%sInsira o novo ano de nascimento: %s", LIGHT_GREEN, RESET);
    scanf("%d", &aux->vetor.data.ano);
    limparbuffer();

    // Atualiza o signo e elemento com base na nova data de nascimento
    determinarSignoEElemento(aux->vetor.data.dia, aux->vetor.data.mes,
                             aux->vetor.signo_pessoa, aux->vetor.elemento);

    // Confirma√ß√£o de sucesso
    printf("%s‚úÖ Astrologista atualizado com sucesso!%s\n", GREEN, RESET);
}

// Fun√ß√£o para buscar um astrologista pelo nome na lista
void Buscar_Astrologista(Signo* Ptl, char* nome) {
    // Verifica se o ponteiro da lista √© v√°lido
    if (Ptl == NULL) {
        printf("%s‚ùå Erro: Lista vazia!%s\n", RED, RESET);
        return;
    }

    int encontrado = 0;
    Signo* aux = Ptl;
    // Percorre a lista procurando pelo nome do astrologista
    while (aux != NULL) {
        // Compara o nome do astrologista usando uma compara√ß√£o case-insensitive
        if (strcasecmp(aux->vetor.nome, nome) == 0) {
            // Exibe as informa√ß√µes do astrologista encontrado
            printf("%süîç Astrologista Encontrado:%s\n", CYAN, RESET);
            printf("%sNome: %s%s\n", GREEN, aux->vetor.nome, RESET);
            printf("Data de nascimento: %d/%s/%d\n", aux->vetor.data.dia,
                   obterMes(aux->vetor.data.mes), aux->vetor.data.ano);
            printf("Signo: %s\n", aux->vetor.signo_pessoa);
            printf("Elemento: %s\n\n", aux->vetor.elemento);
            encontrado = 1;
            break;
        }
    }

    // Se n√£o encontrou o astrologista, exibe uma mensagem de erro
    if (!encontrado) {
        printf("%s‚ùå Astrologista n√£o encontrado!%s\n", RED, RESET);
    }
}

// Fun√ß√£o para obter o nome do signo com base no √≠ndice
const char* obterSignoPorIndice(int indice) {
    // Array de strings contendo os nomes dos signos
    static const char* signos[] = {
        "√Åries", "Touro", "G√™meos", "C√¢ncer", "Le√£o", 
        "Virgem", "Libra", "Escorpi√£o", "Sagit√°rio", 
        "Capric√≥rnio", "Aqu√°rio", "Peixes"
    };

    // Verifica se o √≠ndice est√° dentro do intervalo v√°lido e retorna o nome do signo
    if (indice >= 0 && indice < 12) {
        return signos[indice];
    }
    return "Desconhecido";
}

// Fun√ß√£o para exibir estat√≠sticas dos signos presentes na lista de astrologistas
void Exibir_Estatisticas(Signo* Ptl) {
    // Emojis representando os signos
    const char* emojis[] = {
        "‚ôà", "‚ôâ", "‚ôä", "‚ôã", "‚ôå", "‚ôç", "‚ôé", "‚ôè", "‚ôê", "‚ôë", "‚ôí", "‚ôì"
    };

    // Nomes dos signos
    const char* signos[] = {
        "√Åries", "Touro", "G√™meos", "C√¢ncer", "Le√£o", 
        "Virgem", "Libra", "Escorpi√£o", "Sagit√°rio", 
        "Capric√≥rnio", "Aqu√°rio", "Peixes"
    };

    // Verifica se a lista foi inicializada e se n√£o est√° vazia
    if (Ptl == NULL || E_vazia(Ptl) == 1) {
        printf("%s‚ùå Lista n√£o inicializada ou vazia!%s\n", RED, RESET);
        return;
    }

    int total = Quantidade_Elementos(Ptl);
    int signos_count[12] = {0}; // Array para contar o n√∫mero de astrologistas por signo
    Signo* aux = Ptl;
    // Conta o n√∫mero de astrologistas para cada signo
    while (aux != NULL){
        for (int j = 0; j < 12; j++) {
            if (strcmp(aux->vetor.signo_pessoa, obterSignoPorIndice(j)) == 0) {
                signos_count[j]++;
                break;
            }
        }
            aux = aux->prox;
    }
    

    // Exibe as estat√≠sticas da lista
    printf("%süìä Estat√≠sticas da Lista:%s\n", MAGENTA, RESET);
    printf("%sTotal de Astrologistas: %d%s\n", CYAN, total, RESET);

    // Exibe o n√∫mero de astrologistas para cada signo com seus respectivos emojis
    for (int i = 0; i < 12; i++) {
        printf("%s%s %s: %d%s\n", BOLD, emojis[i], signos[i], signos_count[i], RESET);
    }
}

int Quantidade_Elementos(Signo* Ptl){
    Signo* aux = Ptl;
    int cont = 0;
    while (aux != NULL){
        cont++;
        aux = aux->prox;
    }
    return cont;
}
