#include <stdio.h>
#include <stdlib.h>
#include "funcoes.h"

int main() {
    // Aloca mem√≥ria para uma nova lista duplamente encadeada
    ListaDuplamenteEncadeada* lista = (ListaDuplamenteEncadeada*)malloc(sizeof(ListaDuplamenteEncadeada));
    if (lista == NULL) {
        // Mensagem de erro se a aloca√ß√£o de mem√≥ria falhar
        printf(RED "‚ùå Erro ao alocar mem√≥ria para a lista.\n" RESET);
        return 1;  // Retorna c√≥digo de erro
    }
    // Inicializa a lista chamando Cria_lista, que define a cauda como NULL
    lista->cabeca = Cria_lista(lista);

    // Exibe uma mensagem de boas-vindas ao usu√°rio
    boasVindas();
    limpar();  // Limpa a tela para melhor visualiza√ß√£o

    // Insere 7 Emojis na lista
    for (int i = 0; i < 7; i++) {
        Insere(lista);  // Chama a fun√ß√£o para inserir um novo Emoji na lista
        limpar();       // Limpa a tela ap√≥s cada inser√ß√£o
    }

    // Exibe a lista de Emojis antes de orden√°-la
    Exibe(lista);
    limpar();  // Limpa a tela

    // Ordena a lista de Emojis usando Stooge Sort
    ordenarLista(lista);
    limpar();  // Limpa a tela

    // Consulta um Emoji espec√≠fico na lista
    const char* emojiParaConsultar = "üòÇ";
    printf(CYAN "\nüîç Consultando o emoji: %s\n" RESET, emojiParaConsultar);
    Consulta_elem(lista, emojiParaConsultar);
    limpar();  // Limpa a tela

    // Remove todos os Emojis com uma popularidade espec√≠fica
    int flag;
    int popularidadeParaRemover = 15;
    Exibe(lista);  // Exibe a lista antes da remo√ß√£o
    printf(CYAN "\nüóëÔ∏è Removendo emojis com popularidade: %d\n" RESET, popularidadeParaRemover);
    Remove_elem(lista, popularidadeParaRemover, &flag);

    // Exibe a lista ap√≥s a remo√ß√£o dos Emojis
    printf(CYAN "\nüîÑ Lista ap√≥s remo√ß√£o:\n" RESET);
    Exibe(lista);

    // Libera a mem√≥ria alocada para a lista e para os Emojis
    Libera_lista(lista);
    free(lista);  // Libera a mem√≥ria alocada para a estrutura da lista

    return 0;  // Retorna 0 para indicar que o programa foi conclu√≠do com sucesso
}
