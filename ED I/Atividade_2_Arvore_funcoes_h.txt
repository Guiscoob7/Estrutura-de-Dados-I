// funcoes.h 
#ifndef FUNCOES_H
#define FUNCOES_H

// Definindo códigos de cor ANSI para formatação do texto no terminal 🌈
#define RESET "\033[0m"  // 🆕 Reseta as configurações de cor
#define BOLD "\033[1m"  // 💪 Texto em negrito
#define UNDERLINE "\033[4m"  // 🖊️ Texto sublinhado
#define GREEN "\033[32m"  // 🍏 Texto verde
#define YELLOW "\033[33m"  // 🌻 Texto amarelo
#define CYAN "\033[36m"  // 💧 Texto ciano
#define MAGENTA "\033[35m"  // 💜 Texto magenta
#define RED "\033[31m"  // 🔴 Texto vermelho
#define BLUE "\033[34m"  // 🔵 Texto azul
#define LIGHT_BLUE "\033[94m"  // 💙 Texto azul claro
#define LIGHT_YELLOW "\033[93m"  // 🌼 Texto amarelo claro
#define LIGHT_CYAN "\033[96m"  // 🌊 Texto ciano claro
#define LIGHT_GREEN "\033[92m"  // 🍏 Texto verde claro
#define LIGHT_RED "\033[91m"  // 🔴 Texto vermelho claro
#define PURPLE "\x1B[35m"  // 💜 Texto roxo
#define ORANGE "\033[38;5;208m"  // 🟠 Texto laranja
#define DOURADO "\033[1;33m"  // 🏆 Texto dourado
#define BLACK "\033[0;30m"  // ⚫ Texto preto
#define LIME "\x1b[38;5;154m"  // 🍈 Texto lima
#define AQUA "\x1b[38;5;51m"  // 💧 Texto aqua
#define PINK "\x1b[38;5;200m"  // 🌸 Texto rosa

// Definição da estrutura para o nó da árvore binária 🌳
typedef struct no {
    int info;              // Valor armazenado no nó 🌿
    struct no *direita;   // Ponteiro para o nó da direita 👉
    struct no *esquerda;  // Ponteiro para o nó da esquerda 👈
} No;

// Protótipos das funções 🔧

// Função para limpar a tela ou interface 🧹
void limpar();

// Função para limpar o buffer de entrada 🚿
void limparbuffer();

// Exibe mensagem de boas-vindas 🎉
void boasVindas();

// Exibe o menu principal de opções 📋
void exibeMenu();

// Função para criar uma árvore binária a partir de um valor 🌳
No* criarArvore(int valor);

// Função para criar um novo nó na árvore 🌱
No* criarNo(int valor);

// Função para inserir um valor na árvore binária 🌲
No* inserir(No* arvore, int valor);

// Função para realizar a travessia Morris da árvore 🌿
void morrisTraversal(No* arvore);

// Função para encontrar o nó com o valor mínimo na árvore 🔍
No* encontrarMinimo(No* arvore);

// Função para remover um nó da árvore binária 🌲❌
No* remover(No* arvore, int valor);

// Função para liberar a memória da árvore binária 🌳💔
void liberarArvore(No* arvore);

#endif // FUNCOES_H
