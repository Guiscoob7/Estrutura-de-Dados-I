#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "funcoes.h"

int main() {
    srand(time(NULL));  // Inicializa a semente para gera√ß√£o de n√∫meros aleat√≥rios com base no tempo atual
    int opcao;  // Vari√°vel para armazenar a op√ß√£o escolhida pelo usu√°rio
    pilhaDosSonhosEstatica *pilhaE = criarPilhaEstatica();  // Cria a pilha est√°tica
    pilhaDosSonhosDinamica *pilhaD = criarPilhaDinamica();  // Cria a pilha din√¢mica
    Sonho sonho;  // Vari√°vel para armazenar os dados de um sonho

    boasVindas();  // Exibe uma mensagem de boas-vindas

    do {
        exibeMenu();  // Exibe o menu de op√ß√µes
        scanf("%d", &opcao);  // L√™ a op√ß√£o escolhida pelo usu√°rio
        limparbuffer();  // Limpa o buffer de entrada
        limpar();  // Limpa a tela

        switch(opcao) {
            case 1:
                sonho = gerarSonhos();  // Gera dados aleat√≥rios para um novo sonho
                printf(ORANGE "üìã Escolha o tipo de pilha:\n\n" RESET);
                printf(LIME "1 - Pilha Est√°tica\n" RESET);
                printf(AQUA "2 - Pilha Din√¢mica\n" RESET);
                printf(PURPLE "\nüñãÔ∏è Digite sua escolha: " RESET);  // Solicita ao usu√°rio a escolha do tipo de pilha
                int tipoPilha;  // Vari√°vel para armazenar o tipo de pilha escolhida
                scanf("%d", &tipoPilha);  // L√™ a escolha do usu√°rio
                limparbuffer();  // Limpa o buffer de entrada

                // Insere o sonho na pilha escolhida
                if (tipoPilha == 1) {
                    if (pushPilhaEstatica(pilhaE, sonho))
                        printf(LIME "\nüôã Sonho inserido na pilha est√°tica com sucesso!\n" RESET);  // Confirma√ß√£o de inser√ß√£o na pilha est√°tica
                } else if (tipoPilha == 2) {
                    pushPilhaDinamica(pilhaD, sonho);  // Insere na pilha din√¢mica
                    printf(AQUA "\nüôÜ Sonho inserido na pilha din√¢mica com sucesso!\n" RESET);  // Confirma√ß√£o de inser√ß√£o na pilha din√¢mica
                } else {
                    printf(RED "\n‚ö†Ô∏è Op√ß√£o inv√°lida!\n" RESET);  // Mensagem de erro para op√ß√£o inv√°lida
                }
                limpar();  // Limpa a tela ap√≥s a opera√ß√£o
                break;
            case 2:
                exibirPilhaEstatica(pilhaE);  // Exibe os elementos da pilha est√°tica
                printf("\n\n");
                exibirPilhaDinamica(pilhaD);  // Exibe os elementos da pilha din√¢mica
                limpar();  // Limpa a tela ap√≥s a exibi√ß√£o
                break;
            case 3:
                // Consulta e exibe os dados do topo da pilha est√°tica
                printf(LIME "üîç Consultando o topo da pilha...\n" RESET);  // Mensagem de consulta
                limpar();  // Limpa a tela
                if (consultaTopoEstatica(pilhaE, &sonho)) {  // Consulta na pilha est√°tica
                    printf(ORANGE "üìã Consulta na pilha est√°tica:\n\n" RESET);  // Exibe cabe√ßalho da consulta
                    printf(PINK "üßë Tipo: %s\n" RESET, sonho.tipo);  // Exibe tipo do sonho
                    printf(LIME "üéâ Intensidade Emocional: %d\n" RESET, sonho.intensidadeEmocional);  // Exibe intensintensidadeEmocional emocional
                    printf(AQUA "‚õìÔ∏è Descri√ß√£o: %s\n\n" RESET, sonho.descricao);  // Exibe descri√ß√£o do sonho
                } else {
                    printf(RED "\nüõë A pilha est√°tica est√° vazia.\n\n" RESET);  // Mensagem de pilha vazia
                }

                // Consulta e exibe os dados do topo da pilha din√¢mica
                if (consultaTopoDinamica(pilhaD, &sonho)) {  // Consulta na pilha din√¢mica
                    printf(PURPLE "üìë Consulta na pilha din√¢mica:\n\n" RESET);  // Exibe cabe√ßalho da consulta
                    printf(PINK "üëß Tipo: %s\n" RESET, sonho.tipo);  // Exibe tipo do sonho
                    printf(LIME "üéÇ Intensidade Emocional: %d\n" RESET, sonho.intensidadeEmocional);  // Exibe intensintensidadeEmocional emocional
                    printf(AQUA "üõ†Ô∏è Descri√ß√£o: %s\n\n" RESET, sonho.descricao);  // Exibe descri√ß√£o do sonho
                } else {
                    printf(RED "\n‚õî A pilha din√¢mica est√° vazia.\n\n" RESET);  // Mensagem de pilha vazia
                }
                limpar();
                break;
            case 4:
                printf(ORANGE "üìã Escolha o tipo de pilha para remover o sonho:\n\n" RESET);  // Solicita a escolha do tipo de pilha para remo√ß√£o
                printf(LIME "1 - Pilha Est√°tica\n" RESET);
                printf(AQUA "2 - Pilha Din√¢mica\n" RESET);
                printf(PURPLE "\nüñäÔ∏è Digite sua escolha: " RESET);  // Solicita a escolha do tipo de pilha
                scanf("%d", &tipoPilha);  // L√™ a escolha do usu√°rio
                limparbuffer();  // Limpa o buffer de entrada
                limpar();
                // Remove o sonho da pilha escolhida
                if (tipoPilha == 1) {
                    if (popPilhaEstatica(pilhaE, &sonho)) {  // Remove da pilha est√°tica
                        printf(LIME "üôã‚Äç‚ôÇÔ∏è Sonho removido da pilha est√°tica com sucesso!\n\n" RESET);  // Confirma√ß√£o de remo√ß√£o
                        printf(PINK "üë¶ Tipo: %s\n" RESET, sonho.tipo);  // Exibe tipo do sonho removido
                        printf(LIME "üéä Intensidade Emocional: %d\n" RESET, sonho.intensidadeEmocional);  // Exibe intensintensidadeEmocional emocional do sonho removido
                        printf(AQUA "‚öñÔ∏è Descri√ß√£o: %s\n" RESET, sonho.descricao);  // Exibe descri√ß√£o do sonho removido
                    } else {
                        printf(RED "üö´ A pilha est√°tica est√° vazia.\n" RESET);  // Mensagem de pilha vazia
                    }
                } else if (tipoPilha == 2) {
                    if (popPilhaDinamica(pilhaD, &sonho)) {  // Remove da pilha din√¢mica
                        printf(AQUA "üôÜ‚Äç‚ôÇÔ∏è Sonho removido da pilha din√¢mica com sucesso!\n\n" RESET);  // Confirma√ß√£o de remo√ß√£o
                        printf(PINK "üë© Tipo: %s\n" RESET, sonho.tipo);  // Exibe tipo do sonho removido
                        printf(LIME "üéà Intensidade Emocional: %d\n" RESET, sonho.intensidadeEmocional);  // Exibe intensintensidadeEmocional emocional do sonho removido
                        printf(AQUA "üî® Descri√ß√£o: %s\n" RESET, sonho.descricao);  // Exibe descri√ß√£o do sonho removido
                    } else {
                        printf(RED "\n‚ùå A pilha din√¢mica est√° vazia.\n" RESET);  // Mensagem de pilha vazia
                    }
                } else {
                    printf(RED "\n‚ö†Ô∏è Op√ß√£o inv√°lida!\n" RESET);  // Mensagem de erro para op√ß√£o inv√°lida
                }
                limpar();  // Limpa a tela ap√≥s a opera√ß√£o
                break;
            case 5: {
                limpar();
                double tempos[15];
                int cont = 0;
                int entradas[] = {1000, 3000, 5000, 10000, 25000};
                
                // An√°lise da pilha est√°tica
                analisePilhaEstatica(pilhaE, &sonho, tempos); // Chama a fun√ß√£o para analisar a pilha est√°tica
                
                // Cores e Estilos
                limpar();
                printf("%süåü %sTempos de execu√ß√£o - Pilha Est√°tica %süåü\n\n", CYAN, BOLD, RESET);
                for (int i = 0; i < 15; i += 3) {
                    printf("%süü¢ %sQuantidade de Clocks (Inser√ß√£o - %d entradas) %d: %.6f clocks %s\n", LIGHT_GREEN, BOLD, entradas[cont], i + 1, tempos[i], RESET);
                    printf("%süîç %sQuantindade de Clocks (Exibi√ß√£o - %d entradas) %d: %.6f clocks %s\n", LIGHT_YELLOW, BOLD, entradas[cont], i + 1, tempos[i + 1], RESET);
                    printf("%süî¥ %sQuantindade de Clocks (Remo√ß√£o - %d entradas) %d: %.6f clocks %s\n", LIGHT_CYAN, BOLD, entradas[cont++], i + 1, tempos[i + 2], RESET);
                    printf("\n"); // Espa√ßo entre as itera√ß√µes
                }
                printf("%s‚ú® An√°lise completa! Obrigado por utilizar o sistema! ‚ú®%s\n", MAGENTA, RESET);
                limpar();
                break;
            }

            case 6: {
                limpar();
                double tempos[15];
                int cont = 0;
                int entradas[] = {1000, 3000, 5000, 10000, 25000};
                
                // An√°lise da pilha din√¢mica
                analisePilhaDinamica(pilhaD, &sonho, tempos); // Chama a fun√ß√£o para analisar a pilha din√¢mica
                
                // Cores e Estilos
                printf("%süåà %sTempos de execu√ß√£o - Pilha Din√¢mica %süåà\n\n", LIGHT_BLUE, BOLD, RESET);
                limpar();
                for (int i = 0; i < 15; i += 3) {
                    printf("%süöÄ %sQuantintensidadeEmocional de Clocks (Inser√ß√£o - %d entradas) %d: %.6f clocks %s\n", LIGHT_YELLOW, BOLD, entradas[cont], i + 1, tempos[i], RESET);
                    printf("%süëÅÔ∏è %sQuantintensidadeEmocional de Clocks (Exibi√ß√£o - %d entradas) %d: %.6f clocks %s\n", LIGHT_GREEN, BOLD, entradas[cont], i + 1, tempos[i + 1], RESET);
                    printf("%süóëÔ∏è %sQuantintensidadeEmocional de Clocks (Remo√ß√£o - %d entradas) %d: %.6f clocks %s\n", LIGHT_CYAN, BOLD, entradas[cont++], i + 1, tempos[i + 2], RESET);
                    printf("\n"); // Espa√ßo entre as itera√ß√µes
                }

                printf("%süéâ An√°lise completa! Obrigado por utilizar o sistema! üéâ%s\n", MAGENTA, RESET);
                limpar();
                break;
            }
            case 7:
            printf(ORANGE "üìã Escolha o tipo de pilha para realizar seu sonho:\n\n" RESET);
            printf(LIME "1 - Pilha Est√°tica dos Sonhos\n" RESET);
            printf(AQUA "2 - Pilha Din√¢mica dos Sonhos\n" RESET);
            printf(PURPLE "\nüñäÔ∏è Digite sua escolha: " RESET);
            scanf("%d", &tipoPilha);  // L√™ a escolha do usu√°rio
            limparbuffer();  // Limpa o buffer de entrada
            limpar();  // Limpa a tela

            if (tipoPilha == 1) {
                // Verifica se a pilha est√° vazia
                if (!pilhaVaziaEstatica(pilhaE)) {
                    if (!realizarSonho()) {  // Desafio para realizar o sonho
                        if (popPilhaEstatica(pilhaE, &sonho)) {  // Remove da pilha de sonhos
                            printf(LIME "üåô Sonho n√£o realizado na pilha est√°tica!\n\n" RESET);
                            printf(PINK "üë§ tipo do Sonhador: %s\n" RESET, sonho.tipo);
                            printf(LIME "üéâ intensidadeEmocional do Sonhador: %d\n" RESET, sonho.intensidadeEmocional);
                            printf(AQUA "üí≠ Sonho: %s\n" RESET, sonho.descricao);
                        } else {
                            printf(RED "üö´ N√£o foi poss√≠vel realizar o sonho da pilha est√°tica.\n" RESET);
                        }
                    } else {  // Caso o sonho tenha sido alcan√ßado
                        if (popPilhaEstatica(pilhaE, &sonho)) {  // Remove da pilha de sonhos
                            printf(LIME "üåô Sonho realizado da pilha est√°tica com sucesso!\n\n" RESET);
                            printf(PINK "üë§ tipo do Sonhador: %s\n" RESET, sonho.tipo);
                            printf(LIME "üéâ intensidadeEmocional do Sonhador: %d\n" RESET, sonho.intensidadeEmocional);
                            printf(AQUA "üí≠ Sonho: %s\n" RESET, sonho.descricao);
                        } else {
                            printf(RED "üö´ N√£o foi poss√≠vel liberar o sonho da pilha est√°tica.\n" RESET);
                        }
                    }
                } else {
                    printf(RED "üö´ A pilha est√°tica dos sonhos est√° vazia.\n" RESET);
                }
            } else if (tipoPilha == 2) {
                // Verifica se a pilha din√¢mica est√° vazia
                if (!pilhaVaziaDinamica(pilhaD)) {
                    if (!realizarSonho()) {  // Desafio para realizar o sonho
                        if (popPilhaDinamica(pilhaD, &sonho)) {  // Remove da pilha din√¢mica
                            printf(AQUA "üåô Sonho n√£o realizado na pilha din√¢mica!\n\n" RESET);
                            printf(PINK "üë§ tipo do Sonhador: %s\n" RESET, sonho.tipo);
                            printf(LIME "üéâ intensidadeEmocional do Sonhador: %d\n" RESET, sonho.intensidadeEmocional);
                            printf(AQUA "üí≠ Sonho: %s\n" RESET, sonho.descricao);
                        } else {
                            printf(RED "\n‚ùå N√£o foi poss√≠vel realizar o sonho da pilha din√¢mica.\n" RESET);
                        }
                    } else {  // Caso o sonho tenha sido alcan√ßado
                        if (popPilhaDinamica(pilhaD, &sonho)) {  // Remove da pilha din√¢mica
                            printf(AQUA "üåô Sonho realizado da pilha din√¢mica com sucesso!\n\n" RESET);
                            printf(PINK "üë§ tipo do Sonhador: %s\n" RESET, sonho.tipo);
                            printf(LIME "üéâ intensidadeEmocional do Sonhador: %d\n" RESET, sonho.intensidadeEmocional);
                            printf(AQUA "üí≠ Sonho: %s\n" RESET, sonho.descricao);
                        } else {
                            printf(RED "üö´ N√£o foi poss√≠vel liberar o sonho da pilha din√¢mica.\n" RESET);
                        }
                    }
                } else {
                    printf(RED "üö´ A pilha din√¢mica dos sonhos est√° vazia.\n" RESET);
                }
            } else {
                printf(RED "\n‚ö†Ô∏è Op√ß√£o inv√°lida! Escolha entre 1 ou 2.\n" RESET);
            }

            limpar();  // Limpa a tela ap√≥s a opera√ß√£o
                break;
            case 8:
                printf(BOLD RED "üö∂‚Äç‚ôÇÔ∏è Voc√™ abandonou a pilha! " RESET "\n\n");
                printf(BOLD YELLOW "‚è≥ " RESET "Espero que tenha sido uma boa escolha! \n");
                printf(GREEN "üí™ N√£o se preocupe, voc√™ pode tentar novamente! " RESET "\n");
                printf(PINK "üéâ Fica tranquilo, o show continua! " RESET "\n");
            break;
            default:
                printf(RED "\n‚ö†Ô∏è Op√ß√£o inv√°lida! Por favor, escolha uma op√ß√£o v√°lida do menu.\n" RESET);  // Mensagem padr√£o para op√ß√£o inv√°lida
                break;  // Para qualquer op√ß√£o n√£o reconhecida, n√£o faz nada
        }

    } while (opcao != 8);  // O loop continua at√© que a op√ß√£o 7 seja escolhida

    free(pilhaE);  // Libera a mem√≥ria da pilha est√°tica
    printf(LIME "‚ôªÔ∏è Pilha Est√°tica liberada!\n\n" RESET);  // Mensagem de confirma√ß√£o de libera√ß√£o
    liberarPilhaDinamica(pilhaD);  // Libera a mem√≥ria da pilha din√¢mica
    printf(LIME "‚ôªÔ∏è Pilha Din√¢mica liberada!\n" RESET);  // Mensagem de confirma√ß√£o de libera√ß√£o
    printf(GREEN "‚úÖ Obrigado por usar o programa de sonhos! At√© a pr√≥xima!\n" RESET);  // Mensagem de despedida

    return 0;  // Finaliza o programa com sucesso
}
