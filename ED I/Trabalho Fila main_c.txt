#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "funcoes.h"

int main() {
    srand(time(NULL));  // Inicializa a semente para gera√ß√£o de n√∫meros aleat√≥rios com base no tempo atual
    int opcao;  // Vari√°vel para armazenar a op√ß√£o escolhida pelo usu√°rio
    filaDaMorteEstatica *filaE = criarFilaEstatica(filaE);  // Cria a fila est√°tica
    filaDaMorteDinamica *filaD = criarFilaDinamica(filaD);  // Cria a fila din√¢mica
    Pessoas pessoa;  // Vari√°vel para armazenar os dados de uma pessoa

    boasVindas();  // Exibe uma mensagem de boas-vindas

    do {
        exibeMenu();  // Exibe o menu de op√ß√µes
        scanf("%d", &opcao);  // L√™ a op√ß√£o escolhida pelo usu√°rio
        limparbuffer();  // Limpa o buffer de entrada
        limpar();  // Limpa a tela

        switch(opcao) {
            case 1:
                pessoa = gerarProfessores();  // Gera dados aleat√≥rios para uma nova pessoa
                printf(ORANGE "üìã Escolha o tipo de fila:\n\n" RESET);
                printf(LIME "1 - Fila Est√°tica\n" RESET);
                printf(AQUA "2 - Fila Din√¢mica\n" RESET);
                printf(PURPLE "\nüñãÔ∏è Digite sua escolha: " RESET);  // Solicita ao usu√°rio a escolha do tipo de fila
                int tipoFila;  // Vari√°vel para armazenar o tipo de fila escolhida
                scanf("%d", &tipoFila);  // L√™ a escolha do usu√°rio
                limparbuffer();  // Limpa o buffer de entrada

                // Insere a pessoa na fila escolhida
                if (tipoFila == 1) {
                    if (inserirFilaEstatica(filaE, pessoa))
                        printf(LIME "\nüôã Pessoa inserida na fila est√°tica com sucesso!\n" RESET);  // Confirma√ß√£o de inser√ß√£o na fila est√°tica
                } else if (tipoFila == 2) {
                    inserirFilaDinamica(filaD, pessoa);  // Insere na fila din√¢mica
                    printf(AQUA "\nüôÜ Pessoa inserida na fila din√¢mica com sucesso!\n" RESET);  // Confirma√ß√£o de inser√ß√£o na fila din√¢mica
                } else {
                    printf(RED "\n‚ö†Ô∏è Op√ß√£o inv√°lida!\n" RESET);  // Mensagem de erro para op√ß√£o inv√°lida
                }
                limpar();  // Limpa a tela ap√≥s a opera√ß√£o
                break;
            case 2:
                exibirFilaEstatica(filaE);  // Exibe os elementos da fila est√°tica
                printf("\n\n");
                exibirFilaDinamica(filaD);  // Exibe os elementos da fila din√¢mica
                limpar();  // Limpa a tela ap√≥s a exibi√ß√£o
                break;
            case 3:
                // Consulta e exibe os dados da fila est√°tica
                printf(LIME "üîç Consultando pessoa na fila...\n" RESET);  // Mensagem de consulta
                limpar();  // Limpa a tela
                if (consultaFilaEstatica(filaE, &pessoa)) {  // Consulta na fila est√°tica
                    printf(ORANGE "üìã Consulta na fila est√°tica:\n\n" RESET);  // Exibe cabe√ßalho da consulta
                    printf(PINK "üßë Nome: %s\n" RESET, pessoa.nome);  // Exibe nome da pessoa
                    printf(LIME "üéâ Idade: %d\n" RESET, pessoa.idade);  // Exibe idade da pessoa
                    printf(AQUA "‚õìÔ∏è Crime: %s\n\n" RESET, pessoa.crime);  // Exibe crime cometido pela pessoa
                } else {
                    printf(RED "\nüõë A fila est√°tica est√° vazia.\n\n" RESET);  // Mensagem de fila vazia
                }

                // Consulta e exibe os dados da fila din√¢mica
                if (consultaFilaDinamica(filaD, &pessoa)) {  // Consulta na fila din√¢mica
                    printf(PURPLE "üìë Consulta na fila din√¢mica:\n\n" RESET);  // Exibe cabe√ßalho da consulta
                    printf(PINK "üëß Nome: %s\n" RESET, pessoa.nome);  // Exibe nome da pessoa
                    printf(LIME "üéÇ Idade: %d\n" RESET, pessoa.idade);  // Exibe idade da pessoa
                    printf(AQUA "üõ†Ô∏è Crime: %s\n\n" RESET, pessoa.crime);  // Exibe crime cometido pela pessoa
                } else {
                    printf(RED "\n‚õî A fila din√¢mica est√° vazia.\n\n" RESET);  // Mensagem de fila vazia
                }
                limpar();
                break;
            case 4:
                printf(ORANGE "üìã Escolha o tipo de fila para remover a pessoa:\n\n" RESET);  // Solicita a escolha do tipo de fila para remo√ß√£o
                printf(LIME "1 - Fila Est√°tica\n" RESET);
                printf(AQUA "2 - Fila Din√¢mica\n" RESET);
                printf(PURPLE "\nüñäÔ∏è Digite sua escolha: " RESET);  // Solicita a escolha do tipo de fila
                scanf("%d", &tipoFila);  // L√™ a escolha do usu√°rio
                limparbuffer();  // Limpa o buffer de entrada
                limpar();
                // Remove a pessoa da fila escolhida
                if (tipoFila == 1) {
                    if (removeFilaEstatica(filaE, &pessoa)) {  // Remove da fila est√°tica
                        printf(LIME "üôã‚Äç‚ôÇÔ∏è Pessoa removida da fila est√°tica com sucesso!\n\n" RESET);  // Confirma√ß√£o de remo√ß√£o
                        printf(PINK "üë¶ Nome: %s\n" RESET, pessoa.nome);  // Exibe nome da pessoa removida
                        printf(LIME "üéä Idade: %d\n" RESET, pessoa.idade);  // Exibe idade da pessoa removida
                        printf(AQUA "‚öñÔ∏è Crime: %s\n" RESET, pessoa.crime);  // Exibe crime da pessoa removida
                    } else {
                        printf(RED "üö´ A fila est√°tica est√° vazia.\n" RESET);  // Mensagem de fila vazia
                    }
                } else if (tipoFila == 2) {
                    if (removeFilaDinamica(filaD, &pessoa)) {  // Remove da fila din√¢mica
                        printf(AQUA "üôÜ‚Äç‚ôÇÔ∏è Pessoa removida da fila din√¢mica com sucesso!\n\n" RESET);  // Confirma√ß√£o de remo√ß√£o
                        printf(PINK "üë© Nome: %s\n" RESET, pessoa.nome);  // Exibe nome da pessoa removida
                        printf(LIME "üéà Idade: %d\n" RESET, pessoa.idade);  // Exibe idade da pessoa removida
                        printf(AQUA "üî® Crime: %s\n" RESET, pessoa.crime);  // Exibe crime da pessoa removida
                    } else {
                        printf(RED "\n‚ùå A fila din√¢mica est√° vazia.\n" RESET);  // Mensagem de fila vazia
                    }
                } else {
                    printf(RED "\n‚ö†Ô∏è Op√ß√£o inv√°lida!\n" RESET);  // Mensagem de erro para op√ß√£o inv√°lida
                }
                limpar();  // Limpa a tela ap√≥s a opera√ß√£o
                break;
            case 5: {
                limpar();
                double tempos[15];
                int cont = 0;
                int entradas[] = {1000, 3000, 5000, 10000, 25000};
                analiseFilaEstatica(filaE, &pessoa, tempos);
                // Cores e Estilos
                limpar();
                printf("%süåü %sTempos de execu√ß√£o - Fila Est√°tica %süåü\n\n", CYAN, BOLD, RESET);
                for (int i = 0; i < 15; i += 3) {
                    printf("%süü¢ %sQuantidade de Clocks (Inser√ß√£o - %d entradas) %d: %.6f clocks %s\n", LIGHT_GREEN, BOLD, entradas[cont], i + 1, tempos[i], RESET);
                    printf("%süîç %sQuantidade de Clocks (Exibi√ß√£o - %d entradas) %d: %.6f clocks %s\n", LIGHT_YELLOW, BOLD, entradas[cont], i + 1, tempos[i + 1], RESET);
                    printf("%süî¥ %sQuantidade de Clocks (Remo√ß√£o - %d entradas) %d: %.6f clocks %s\n", LIGHT_CYAN, BOLD, entradas[cont++], i + 1, tempos[i + 2], RESET);
                    printf("\n"); // Espa√ßo entre as itera√ß√µes
                }
                printf("%s‚ú® An√°lise completa! Obrigado por utilizar o sistema! ‚ú®%s\n", MAGENTA, RESET);
                limpar();
                break;
            }
            case 6: {
                limpar();
                double tempos[15];
                int cont = 0;
                int entradas[] = {1000, 3000, 5000, 10000, 25000};
                
                analiseFilaDinamica(filaD, &pessoa, tempos); // Chama a fun√ß√£o para analisar a fila din√¢mica
                
                // Cores e Estilos
                printf("%süåà %sTempos de execu√ß√£o - Fila Din√¢mica %süåà\n\n", LIGHT_BLUE, BOLD, RESET);
                limpar();
                for (int i = 0; i < 15; i += 3) {
                    printf("%süöÄ %sQuantidade de Clocks (Inser√ß√£o - %d entradas) %d: %.6f clocks %s\n", LIGHT_YELLOW, BOLD, entradas[cont], i + 1, tempos[i], RESET);
                    printf("%süëÅÔ∏è %sQuantidade de Clocks (Exibi√ß√£o - %d entradas) %d: %.6f clocks %s\n", LIGHT_GREEN, BOLD, entradas[cont], i + 1, tempos[i + 1], RESET);
                    printf("%süóëÔ∏è %sQuantidade de Clocks (Remo√ß√£o - %d entradas) %d: %.6f clocks %s\n", LIGHT_CYAN, BOLD, entradas[cont++], i + 1, tempos[i + 2], RESET);
                    printf("\n"); // Espa√ßo entre as itera√ß√µes
                }

                printf("%süéâ An√°lise completa! Obrigado por utilizar o sistema! üéâ%s\n", MAGENTA, RESET);
                limpar();
                break;
            }
            case 7:
                printf(ORANGE "üìã Escolha o tipo de fila para desafiar um condenado:\n\n" RESET);  // Solicita a escolha do tipo de fila
                printf(LIME "1 - Fila Est√°tica\n" RESET);
                printf(AQUA "2 - Fila Din√¢mica\n" RESET);
                printf(PURPLE "\nüñäÔ∏è Digite sua escolha: " RESET);  // Solicita a escolha do tipo de fila
                scanf("%d", &tipoFila);  // L√™ a escolha do usu√°rio
                limparbuffer();  // Limpa o buffer de entrada
                limpar();  // Limpa a tela

                if (tipoFila == 1) {
                    // Verifica se a fila est√° vazia (chama a fun√ß√£o correta)
                    if (!filaVaziaEstatica(filaE)) {
                        if (!desafiarCondenado()) {  // Chama a fun√ß√£o para desafiar o condenado
                            if (removeFilaEstatica(filaE, &pessoa)) {  // Remove da fila est√°tica
                                printf(LIME "üôã‚Äç‚ôÇÔ∏è Pessoa executada da fila est√°tica com sucesso!\n\n" RESET);  // Confirma√ß√£o de remo√ß√£o
                                printf(PINK "üë¶ Nome: %s\n" RESET, pessoa.nome);  // Exibe nome da pessoa removida
                                printf(LIME "üéä Idade: %d\n" RESET, pessoa.idade);  // Exibe idade da pessoa removida
                                printf(AQUA "‚öñÔ∏è Crime: %s\n" RESET, pessoa.crime);  // Exibe crime da pessoa removida
                            } else {
                                printf(RED "üö´ N√£o foi poss√≠vel remover a pessoa da fila est√°tica.\n" RESET);  // Caso falhe a remo√ß√£o
                            }
                        } else {  // Caso o condenado tenha sido liberado
                            if (removeFilaEstatica(filaE, &pessoa)) {  // Remove da fila est√°tica
                                printf(LIME "üôã‚Äç‚ôÇÔ∏è Pessoa liberada da fila est√°tica com sucesso!\n\n" RESET);  // Confirma√ß√£o de remo√ß√£o
                                printf(PINK "üë¶ Nome: %s\n" RESET, pessoa.nome);  // Exibe nome da pessoa removida
                                printf(LIME "üéä Idade: %d\n" RESET, pessoa.idade);  // Exibe idade da pessoa removida
                                printf(AQUA "‚öñÔ∏è Crime: %s\n" RESET, pessoa.crime);  // Exibe crime da pessoa removida
                            } else {
                                printf(RED "üö´ N√£o foi poss√≠vel remover a pessoa da fila est√°tica.\n" RESET);  // Caso falhe a remo√ß√£o
                            }
                        }
                    } else {
                        printf(RED "üö´ A fila est√°tica est√° vazia.\n" RESET);  // Mensagem caso a fila esteja vazia
                    }
                } else if (tipoFila == 2) {
                    // Verifica se a fila din√¢mica est√° vazia (chama a fun√ß√£o correta)
                    if (!filaVaziaDinamica(filaD)) {
                        if (!desafiarCondenado()) {  // Chama a fun√ß√£o para desafiar o condenado
                            if (removeFilaDinamica(filaD, &pessoa)) {  // Remove da fila din√¢mica
                                printf(AQUA "üôÜ‚Äç‚ôÇÔ∏è Pessoa executada da fila din√¢mica com sucesso!\n\n" RESET);  // Confirma√ß√£o de remo√ß√£o
                                printf(PINK "üë© Nome: %s\n" RESET, pessoa.nome);  // Exibe nome da pessoa removida
                                printf(LIME "üéà Idade: %d\n" RESET, pessoa.idade);  // Exibe idade da pessoa removida
                                printf(AQUA "üî® Crime: %s\n" RESET, pessoa.crime);  // Exibe crime da pessoa removida
                            } else {
                                printf(RED "\n‚ùå N√£o foi poss√≠vel remover a pessoa da fila din√¢mica.\n" RESET);  // Caso falhe a remo√ß√£o
                            }
                        } else {  // Caso o condenado tenha sido liberado
                            if (removeFilaDinamica(filaD, &pessoa)) {  // Remove da fila din√¢mica
                                printf(AQUA "üôÜ‚Äç‚ôÇÔ∏è Pessoa liberada da fila din√¢mica com sucesso!\n\n" RESET);  // Confirma√ß√£o de remo√ß√£o
                                printf(PINK "üë© Nome: %s\n" RESET, pessoa.nome);  // Exibe nome da pessoa removida
                                printf(LIME "üéà Idade: %d\n" RESET, pessoa.idade);  // Exibe idade da pessoa removida
                                printf(AQUA "üî® Crime: %s\n" RESET, pessoa.crime);  // Exibe crime da pessoa removida
                            } else {
                                printf(RED "üö´ N√£o foi poss√≠vel remover a pessoa da fila din√¢mica.\n" RESET);  // Caso falhe a remo√ß√£o
                            }
                        }
                    } else {
                        printf(RED "üö´ A fila din√¢mica est√° vazia.\n" RESET);  // Mensagem caso a fila din√¢mica esteja vazia
                    }
                } else {
                    printf(RED "\n‚ö†Ô∏è Op√ß√£o inv√°lida! Escolha entre 1 ou 2.\n" RESET);  // Mensagem de erro para op√ß√£o inv√°lida
                }

                limpar();  // Limpa a tela ap√≥s a opera√ß√£o
            break;
            case 8:
                printf(BOLD RED "üö∂‚Äç‚ôÇÔ∏è Voc√™ abandonou a fila! " RESET "\n\n");
                printf(BOLD YELLOW "‚è≥ " RESET "Espero que tenha sido uma boa escolha! \n");
                printf(GREEN "üí™ N√£o se preocupe, voc√™ pode tentar novamente! " RESET "\n");
                printf(PINK "üéâ Fica tranquilo, o show continua! " RESET "\n");
            break;
            default:
                printf(RED "\n‚ö†Ô∏è Op√ß√£o inv√°lida! Por favor, escolha uma op√ß√£o v√°lida do menu.\n" RESET);  // Mensagem padr√£o para op√ß√£o inv√°lida
                limpar();
            break;  // Para qualquer op√ß√£o n√£o reconhecida, n√£o faz nada
        }

    } while (opcao != 8);  // O loop continua at√© que a op√ß√£o 7 seja escolhida

    free(filaE);  // Libera a mem√≥ria da fila est√°tica
    printf(LIME "\n‚ôªÔ∏è Fila Est√°tica liberada!\n\n" RESET);  // Mensagem de confirma√ß√£o de libera√ß√£o
    filaD = liberarFilaDinamica(filaD);  // Libera a mem√≥ria da fila din√¢mica
    return 0;  // Retorna 0 para indicar que o programa terminou com sucesso
}
