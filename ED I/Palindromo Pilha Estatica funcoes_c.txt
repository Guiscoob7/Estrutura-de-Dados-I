//funcoes.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "funcoes.h"

// Fun√ß√£o para limpar a tela e aguardar a press√£o de ENTER üöø‚è≥
void limpar() 
{
    // üõë Solicita ao usu√°rio para pressionar ENTER e limpar a tela
    printf("\n\n%süõë %sPressione ENTER para continuar... %süõë%s: ", LIGHT_CYAN, LIGHT_YELLOW, LIGHT_CYAN, RESET);
    getchar();  // ‚è≥ Espera a entrada do usu√°rio
    #ifdef _WIN32
        system("cls");  // üñ•Ô∏è Comando espec√≠fico para Windows para limpar a tela
    #else
        system("clear");  // üçè Comando espec√≠fico para Linux/Mac para limpar a tela
    #endif
}

// Fun√ß√£o para limpar o buffer de entrada üßπ
void limparbuffer() 
{
    int c;
    // üßπ Remove todos os caracteres do buffer de entrada at√© o fim da linha ou o EOF
    while ((c = getchar()) != '\n' && c != EOF);
}

/*
üíª Instru√ß√µes de execu√ß√£o:
cd C:\Importante\C (caminho at√© a pasta em que se encontra o .exe)
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8 
.\programa.exe (nome do programa.exe)
*/

// Fun√ß√£o para exibir mensagens de boas-vindas sobre uma pilha de pal√≠ndromos üååüí§
void boasVindas() 
{
    printf("\n" PINK BOLD "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" RESET "\n");
    printf(PINK BOLD "‚ïë" RESET " üåü‚ú® " BOLD PINK "Bem-vindo √† " RESET PINK BOLD "Pilha dos pal√≠ndromos" RESET PINK BOLD " ‚ú®üåü " PINK BOLD "                               ‚ïë" RESET "\n");
    printf(PINK BOLD "‚ïë" RESET " üåàüéâ " LIGHT_YELLOW "Os pal√≠ndromos s√£o a chave para a divers√£o, entre e descubra!" RESET PINK BOLD " üéâüåà " PINK BOLD "   ‚ïë" RESET "\n");
    printf(PINK BOLD "‚ïë" RESET " üå†üéà " MAGENTA "Cada pal√≠ndromo aqui √© √∫nico, prepare-se para se surpreender!" RESET PINK BOLD " üéàüå† " PINK BOLD "   ‚ïë" RESET "\n");
    printf(PINK BOLD "‚ïë" RESET " üíñüåô " GREEN "Mergulhe na sua mente e deixe os pal√≠ndromos flu√≠rem!" RESET PINK BOLD " üåôüíñ " PINK BOLD "           ‚ïë" RESET "\n");
    printf(PINK BOLD "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" RESET "\n\n");
    limpar();  // Limpa a tela ap√≥s a mensagem de boas-vindas
}

// Fun√ß√£o para criar uma pilha est√°tica de caracteres
pilhaEstatica* criarPilhaEstatica(void)
{
    pilhaEstatica *Ptp;  // Ponteiro para a pilha est√°tica
    Ptp = (pilhaEstatica*) malloc(sizeof(pilhaEstatica));  // Aloca mem√≥ria para a pilha
    if (Ptp != NULL)
        Ptp->topo = -1;  // Inicializa o topo da pilha
    return Ptp;  // Retorna o ponteiro para a pilha
}

// Fun√ß√£o para verificar se a pilha est√° vazia üõë
int pilhaVaziaEstatica(pilhaEstatica* Ptp)
{
    if (Ptp == NULL)
        return -1;  // Retorna -1 se a pilha for nula
    return Ptp->topo == -1;  // Retorna 1 se a pilha estiver vazia
}

// Fun√ß√£o para verificar se a pilha est√° cheia üö´
int pilhaCheiaEstatica(pilhaEstatica* Ptp)
{
    if (Ptp == NULL)
        return -1;  // Retorna -1 se a pilha for nula
    return Ptp->topo == MAX_PILHA-1;  // Retorna 1 se a pilha estiver cheia
}

// Fun√ß√£o para empilhar um caractere na pilha est√°tica
int pushPilhaEstatica(pilhaEstatica* Ptp, char letra)
{
    if (Ptp == NULL || pilhaCheiaEstatica(Ptp)) {
        printf("Erro: Pilha nula ou cheia. ‚ùå\n");  // Mensagem de erro se a pilha estiver cheia ou nula
        return -1;  // Retorna -1 em caso de erro
    }

    Ptp->topo++;  // Incrementa o topo da pilha
    Ptp->letra[Ptp->topo] = letra;  // Armazena a letra no topo da pilha
    return 0;  // Retorna 0 em caso de sucesso
}

// Fun√ß√£o para desempilhar um caractere da pilha est√°tica
int popPilhaEstatica(pilhaEstatica* Ptp, char* letraRemovida) {
    if (Ptp == NULL || pilhaVaziaEstatica(Ptp)) {
        printf(RED "üí§ A pilha est√° vazia ou nula.\n" RESET);  // Mensagem de erro se a pilha estiver vazia
        return -1;  // Retorna -1 em caso de erro
    }

    *letraRemovida = Ptp->letra[Ptp->topo];  // Armazena a letra removida
    Ptp->topo--;  // Decrementa o topo da pilha
    return 0;  // Retorna 0 em caso de sucesso
}

// Fun√ß√£o para processar cada token e verificar pal√≠ndromos
int processarToken(pilhaEstatica* pilha, char* token, char* nomeDepois) {
    int cont;  // Contador para controlar a posi√ß√£o em nomeDepois

    // Inicializa o contador e limpa nomeDepois
    cont = 0;
    memset(nomeDepois, 0, sizeof(nomeDepois));  // Limpa nomeDepois para evitar lixo de mem√≥ria

    // Insere a palavra na pilha
    for (int i = 0; token[i] != '\0'; i++) {
        if (pushPilhaEstatica(pilha, token[i]) == -1) {  // Tenta empilhar cada caractere
            printf(RED "Erro ao empilhar a palavra: %s\n" RESET, token);  // Mensagem de erro ao empilhar
            return 0;  // Retorna 0 se houver erro ao empilhar
        }
    }

    // Remove elementos da pilha e armazena em nomeDepois
    while (pilha->topo >= 0) {
        char letraRemovida;  // Vari√°vel para armazenar letra removida
        if (popPilhaEstatica(pilha, &letraRemovida) == 0) {  // Tenta desempilhar
            nomeDepois[cont++] = letraRemovida;  // Armazena o caractere removido
        }
    }
    nomeDepois[cont] = '\0';  // Adiciona o terminador de string

    // Verifica se √© pal√≠ndromo
    return strcasecmp(token, nomeDepois) == 0;  // Compara a palavra original com a revertida
}

// Fun√ß√£o para liberar a mem√≥ria alocada para a pilha est√°tica
void liberarPilhaEstatica (pilhaEstatica *Ptp)
{
    if (Ptp != NULL)
    {
        free(Ptp);  // Libera a mem√≥ria alocada
        printf(LIME "\n‚ôªÔ∏è Pilha Est√°tica liberada com sucesso!\n\n" RESET);  // Mensagem de sucesso
    }
}

// Fun√ß√£o para substituir caracteres n√£o alfanum√©ricos por '\0' üßº
void substituirCaracteresEspeciais(char *str)
{
    for (int i = 0; str[i] != '\0'; i++)
    {
        if (!isalnum((unsigned char)str[i]))  // Verifica se o caractere n√£o √© alfanum√©rico
            str[i] = '\0';  // Substitui por '\0' se n√£o for alfanum√©rico
    }
}
